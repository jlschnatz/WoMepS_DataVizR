---
title: "Workshop: ggplot2"
title-block-style: default
subtitle  : "Tag 1"
author    : "Arieja Farugie & Luca Schnatz"
date: "`r Sys.Date()`"
code-overflow: wrap
code-block-bg: true
code-block-border-left: "#8800FF"
smooth-scroll: true
format: 
  html:
    self-contained: true
toc: true
touch: true
theme: lux
toc-title: "Inhalt"
highlight-style: printing
---

# Datensatz laden

Zunächst laden wir den Datensatz:

```{r}
#| message: false
library(tidyverse)
library(here)

exercise_data <- read_rds(here("data/exercise_data/clean_exercise_data.rds"))
glimpse(exercise_data)

```

# Basics von ggplot2

-   wir werden die auf ganz einfacher Ebene die wichtigsten Arten von Plots kennenlernen
-   anhand der verschiedenen Arten von Daten (numerisch, kategorisch)

## 1 Variable (Numerisch)

### Boxplot

-   kurze Beschreibung eines Boxplots?
-   wichtig, dass bei einer Variablen, die andere Achse keine Bedeutung besitzt
-   grundsätzlich beginnt \*\*jede\*\* ggplot2-Abbildung mit \`ggplot() + ...\`
-   in dem ggplot() Befehl können bereits die Datenstruktur spezifiziert werden, die in der Abbildung genutzt werden sollen
-   Ebenfalls kann bereits die Aesthetics -\> welche Variablen in dem Datensatz zu bestimmten visuellen Properties/Cues (x, y, color, fill, shape) zugeordnet werden
-   Boxplot als Geometry -\> wird definiert über `geom_boxplot()`

```{r}
ggplot(
  data = exercise_data,
  aes(y = psychological_distress)
  ) +
  geom_boxplot()

ggplot(
  data = exercise_data,
  aes(x = psychological_distress)
  ) +
  geom_boxplot()

```

### Histogramm

-   über Geometry \`geom_histogram()\` definiert
-   wichtig zu merken: Erscheinungsbild von Histogrammen kann durch Anzahl der bins verändert werden
-   es sollte immer verschiedene bin-sizes / Anzahl ausprobiert werden (um dahinterliegende Datenstruktur nicht adäquat darzustellen)

```{r}
ggplot(
  data = exercise_data,
  aes(x = psychological_distress)
  ) +
  geom_histogram()

ggplot(
  data = exercise_data,
  aes(x = psychological_distress)
  ) +
  geom_histogram(bins = 10)

ggplot(
  data = exercise_data,
  aes(x = psychological_distress)
  ) +
  geom_histogram(bins = 40)

```

### Density-Plot

-   Geometry definiert über `geom_density()`\`

-   bei geom_density ist die bandwith (bw) entscheidend für das Aussehen des Plots

-   meistens ist die Vorgabe von ggplot2 schon gut -\> im Einzelfall sollten aber auch verschiedene Parameterwerte ausprobiert werden

```{r}

ggplot(
  data = exercise_data,
  aes(x = psychological_distress)
  ) +
  geom_density()

ggplot(
  data = exercise_data,
  aes(x = psychological_distress)
  ) +
  geom_density(bw = .5)

ggplot(
  data = exercise_data,
  aes(x = psychological_distress)
  ) +
  geom_density(bw = 3)

```

## 1 Variable (Kategorisch)

### Barplot

-   Wann ist Barplot sinnvoll? (bei kategorischen Variablen -\> Anzahl verschiedener Kategorien) -\> z.B. absolute oder relative Anzahl männlich, weiblich, diverser Teilnehmer in einer Stichprobe
-   Was stellt er in dem Beispiel dar?
-   darauf eingehen, was stat = "count" bedeutet -\> statistische Transformation der Daten wird durch ggplot2 vorgenommen
-   darauf eingehen, wie relative Häufigkeiten im Barplot dargestellt werden können

```{r}

ggplot(
  data = exercise_data,
  mapping = aes(x = subj_schichteinstufung)
  ) + 
  geom_bar(stat = "count")

ggplot(
  data = exercise_data,
  mapping = aes(y = subj_schichteinstufung)
  ) + 
  geom_bar(stat = "count")

# relative Häufigkeit
ggplot(
  data = exercise_data,
  mapping = aes(x = subj_schichteinstufung,
                y = after_stat(count/sum(count)))
  ) + 
  geom_bar()

```

### Kuchendiagramm (Pie-Chart)

-   letztendlich nach ggplot ein abgewandelter Barplot -\> bei dem die Bars in einem polaren Koordinatensystem zugeordnet werden

-   darauf eingehen, was theta = "y" bedeutet

-   auf Caveats von Kuchendiagramm eingehen?

```{r}

exercise_data %>%
  count(konfession) %>%
  drop_na(konfession) %>%
  ggplot(
    data = .,
    mapping = aes(x = "", y = n, fill = konfession)
  ) + 
  geom_bar(stat = "identity") +
  coord_polar(theta = "y") 
```

### Donut-Diagramm

-   weglassen?

```{r}
exercise_data %>%
  count(konfession) %>%
  drop_na(konfession) %>%
  ggplot(
    data = .,
    mapping = aes(x = 2, y = n, fill = konfession)
  ) + 
  geom_bar(stat = "identity") +
  coord_polar(theta = "y", start = 200) +
  xlim(0.5, 2.5) 
```

## 2 Variablen (Numerisch, Numerisch)

### Scatterplot

-   jetzt wird nicht nur eine Variable dem Koordinatensystem zugeordnet (x oder y), sondern sowohl x und y -\> zwei numerische Variablen

-   Geometry des Scatter-Plot definiert über \`geom_point()\`

```{r}
ggplot(
  data = exercise_data,
  mapping = aes(x = alter,
                y = bmi)
  ) +
  geom_point()  


```

## 2 Variablen (Kategorisch, Kategorisch)

-   erklären, dass man auch "dodge" benutzen kann

```{r}

ggplot(
  data = exercise_data,
  mapping = aes(x = subj_schichteinstufung, fill = geschlecht)
  ) + 
  geom_bar(stat = "count", position = position_dodge(width = 1))

ggplot(
  data = exercise_data,
  mapping = aes(x = subj_schichteinstufung, fill = geschlecht)
  ) + 
  geom_bar(stat = "count", position = position_stack())

```

## 2 Variablen (Numerisch, Kategorisch)

```{r}

ggplot(
  data = exercise_data,
  mapping = aes(x = subj_schichteinstufung,
                y = psychological_distress)
  ) + 
  geom_boxplot()

```

## Mehr als zwei Variablen

```{r}

ggplot(
  data = exercise_data,
  mapping = aes(x = alter,
                y = bmi,
                color = geschlecht)
) + 
  geom_point()

ggplot(
  data = exercise_data,
  mapping = aes(x = alter,
                y = bmi)
                
  ) + 
  geom_point() + 
  facet_grid(cols = vars(geschlecht)) 

ggplot(
  data = exercise_data,
  mapping = aes(x = alter,
                y = bmi,
                color = geschlecht)
) + 
  geom_point() + 
  facet_grid(cols = vars(geschlecht)) 


```
